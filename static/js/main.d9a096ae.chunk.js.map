{"version":3,"sources":["../node_modules/peerjs/dist sync","components/card.tsx","game/index.ts","communication/index.ts","components/gameconfigurator.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Card","card","hidden","onClick","colorMap","red","yellow","blue","green","wild","style","backgroundColor","color","assignedColor","face","shuffle","array","i","length","j","Math","floor","random","temp","COLORS","NORMAL_FACES","SPECIAL_FACES","newDeck","concat","filter","n","map","c","flat","w","defaultConfig","numDecks","playerNames","startingHandSize","maxDraws","plusTwosStackWithFours","plusTwoSkip","plusFourSkip","unoPenalty","jumpIn","makeConfig","config","mod","a","b","newGame","gameConfig","deck","_","range","numPlayers","uuid","drop","discard","players","p","name","cards","take","direction","currentPlayer","currentDraws","currentPot","winner","undefined","unclaimedUno","takeCard","stack","amount","pos","slice","newStack","isValidPlay","game","topCard","playedCard","playCardFromHand","playerIndex","cardIndex","wildSelectedColor","player","hand","first","updateGame","idx","nextPlayer","cardEffect","update","afterHand","newDirection","victimIndex","some","canStackPot","sum","find","val","offset","sendMessage","conn","message","console","log","Array","isArray","peer","send","JSON","stringify","forEach","GameConfigurator","readOnly","setGameConfig","useState","locked","setLocked","submited","setSubmited","type","default","description","configs","setConfigs","useEffect","DynamicInput","value","onChange","disabled","checked","Object","configName","target","toInteger","fromPairs","k","App","setLocalGame","colorPicker","setColorPicker","ready","setReady","sessionId","setSessionId","isHost","setIsHost","setName","connections","setConnections","peers","setPeers","setGame","useCallback","currentId","error","connection","on","data","msg","parse","off","className","display","justifyContent","flexDirection","margin","every","drawCard","claimingPlayerIndex","claimUno","findIndex","freshGame","placeholder","Peer","cs","connect","trim","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d9a096ae.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","import { Card as GameCard } from \"../game/types\";\n\nexport const Card = ({\n  card,\n  hidden = false,\n  onClick,\n}: {\n  hidden?: boolean;\n  card?: GameCard;\n  onClick?: React.MouseEventHandler<HTMLDivElement>;\n}) => {\n  const colorMap = {\n    red: \"red\",\n    yellow: \"orange\",\n    blue: \"aqua\",\n    green: \"green\",\n    wild: \"gray\",\n  };\n  return card ? (\n    <div\n      onClick={(e) => {\n        if (!hidden && onClick) {\n          onClick(e);\n        }\n      }}\n      style={{\n        backgroundColor: hidden\n          ? \"darkgray\"\n          : card.color === \"wild\" && card.assignedColor\n          ? colorMap[card.assignedColor]\n          : colorMap[card.color],\n        color: \"black\",\n      }}\n    >\n      <span>{hidden ? \"<uno>\" : card.face}</span>\n    </div>\n  ) : (\n    <></>\n  );\n};\n","import {\n  Card,\n  Game,\n  GameConfig,\n  Config,\n  Player,\n  Direction,\n  Color,\n} from \"./types\";\nimport _ from \"lodash\";\nimport { v4 as uuid } from \"uuid\";\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\nexport function shuffle(array: any[]) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n}\n\nexport const COLORS: Color[] = [\"blue\", \"red\", \"green\", \"yellow\"];\nexport const NORMAL_FACES = [\n  \"0\",\n  \"1\",\n  \"2\",\n  \"3\",\n  \"4\",\n  \"5\",\n  \"6\",\n  \"7\",\n  \"8\",\n  \"9\",\n  \"+2\",\n  \"reverse\",\n  \"skip\",\n];\nexport const SPECIAL_FACES = [\"+4\", \"change_color\"];\n\nexport const newDeck: () => Card[] = () => {\n  return [\n    ...NORMAL_FACES.concat(NORMAL_FACES.filter((n) => n !== \"0\")) // two of each number card except for 0\n      .map((n) => COLORS.map((c) => ({ color: c, face: n } as Card))) // each with one of the four colors\n      .flat(),\n    ...SPECIAL_FACES.concat(SPECIAL_FACES, SPECIAL_FACES, SPECIAL_FACES) // four of each wild cards\n      .map((w) => ({ color: \"wild\", face: w } as Card)),\n  ];\n};\n\nconst defaultConfig: Config = {\n  numDecks: 1,\n  playerNames: [\"player 1\", \"player 2\", \"player 3\", \"player 4\"],\n  startingHandSize: 7,\n  maxDraws: 1,\n  plusTwosStackWithFours: true,\n  plusTwoSkip: false,\n  plusFourSkip: true,\n  unoPenalty: 5,\n  jumpIn: true,\n};\n\nexport const makeConfig: (config: GameConfig) => Config = (config) => ({\n  ...defaultConfig,\n  ...config,\n});\n\nconst mod: (a: number, b: number) => number = (a, b) => ((a % b) + b) % b;\n\nexport const newGame: (gameConfig?: GameConfig) => Game = (gameConfig = {}) => {\n  const config = makeConfig(gameConfig);\n  const deck: Card[] = _.range(config.numDecks).map(newDeck).flat();\n  shuffle(deck);\n  const numPlayers = config.playerNames.length;\n  return {\n    id: uuid(),\n    deck: _.drop(deck, numPlayers * config.startingHandSize + 1),\n    discard: [deck[numPlayers * config.startingHandSize]],\n    players: config.playerNames.map(\n      (p, i) =>\n        ({\n          name: p,\n          cards: _.take(\n            _.drop(deck, i * config.startingHandSize),\n            config.startingHandSize\n          ),\n        } as Player)\n    ),\n    direction: \"forward\",\n    currentPlayer: 0,\n    currentDraws: 0,\n    currentPot: [],\n    winner: undefined,\n    unclaimedUno: undefined,\n    ...config,\n  };\n};\n\nexport const flipDirection: (direction: Direction) => Direction = (direction) =>\n  direction === \"forward\" ? \"backward\" : \"forward\";\n\n/**\n * @returns A tuple containing:\n *   - the new stack of cards without the taken ones\n *   - the taken cards\n */\nexport const takeCard: (\n  stack: Card[],\n  amount?: number,\n  pos?: number\n) => [Card[], Card[]] = (stack, amount = 1, pos = 0) => {\n  const cards = _.slice(stack, pos, pos + amount);\n  const newStack = [..._.take(stack, pos), ..._.drop(stack, pos + amount)];\n\n  return [newStack, cards];\n};\n\nexport const isValidPlay: (\n  game: Game,\n  topCard: Card,\n  playedCard: Card\n) => boolean = (game, topCard, playedCard) =>\n  (game.currentPot.length > 0 && // there is a pot, so only reactions are valid\n    (playedCard.face === \"+2\" || playedCard.face === \"+4\") && // reactions can only be +2 and +4\n    (playedCard.face === topCard.face || // reactions of twos on twos and fours on fours is always allowed\n      (game.plusTwosStackWithFours &&\n        (playedCard.color === \"wild\" || // four on twos is allowed with rule\n          (topCard.color === \"wild\" && // twos on fours is allowed with rule if their colors match\n            playedCard.color === topCard.assignedColor))))) ||\n  (game.currentPot.length <= 0 && // there is no pot, any card is valid\n    (topCard.face === playedCard.face ||\n      topCard.color === playedCard.color ||\n      (topCard.color === \"wild\" && // topCard is a wildcard, use its assignedColor\n        topCard.assignedColor === playedCard.color) ||\n      playedCard.color === \"wild\")); // wild cards can always be played\n\nexport const canStackPot: (\n  game: Game,\n  topCard: Card,\n  playedCard: Card\n) => boolean = (game, topCard, playedCard) =>\n  topCard.face === playedCard.face || // can always stack +4 on +4 or +2 on +2\n  (game.plusTwosStackWithFours &&\n    ((topCard.face === \"+4\" &&\n      topCard.assignedColor === playedCard.color &&\n      playedCard.face === \"+2\") || // on top of a +4, only a +2 of the same color is valid\n      (topCard.face === \"+2\" && playedCard.face === \"+4\"))); // on top of a +2, a +4 is valid\n\nexport const playCardFromHand: (\n  game: Game,\n  playerIndex: number,\n  cardIndex: number,\n  wildSelectedColor?: Color\n) => Game = (game, playerIndex, cardIndex, wildSelectedColor) => {\n  if (game.currentPlayer !== playerIndex) return game;\n  const player = game.players[playerIndex];\n  const [hand, cards] = takeCard(player.cards, 1, cardIndex);\n  const card = _.first(cards);\n  const topCard = _.first(game.discard);\n  if (card && topCard && isValidPlay(game, topCard, card)) {\n    if (card.color === \"wild\") {\n      card.assignedColor = wildSelectedColor ?? \"green\";\n    }\n    return updateGame(game, {\n      discard: [card, ...game.discard],\n      players: game.players.map((p, idx) =>\n        idx === playerIndex ? { ...p, cards: hand } : p\n      ),\n      winner: hand.length === 0 ? game.players[playerIndex] : undefined,\n      unclaimedUno: hand.length === 1 ? playerIndex : undefined,\n      ...nextPlayer(game),\n      ...cardEffect(game, card, hand),\n    });\n  }\n  return game;\n};\n\nexport const updateGame: (game: Game, update: Partial<Game>) => Game = (\n  game,\n  update\n) => ({ ...game, ...update, id: uuid() });\n\nexport const claimUno: (game: Game, playerIndex: number) => Game = (\n  game,\n  claimingPlayerIndex\n) => {\n  if (game.unclaimedUno === undefined) return game;\n\n  const [deck, cards] = takeCard(game.deck, game.unoPenalty);\n  return game.unclaimedUno !== claimingPlayerIndex\n    ? updateGame(game, {\n        deck,\n        players: game.players.map((p, i) =>\n          i === game.unclaimedUno ? { ...p, cards: [...p.cards, ...cards] } : p\n        ),\n        unclaimedUno: undefined,\n      })\n    : updateGame(game, {\n        unclaimedUno: undefined,\n      });\n};\n\nexport const drawCard: (game: Game, playerIndex: number) => Game = (\n  game,\n  playerIndex\n) => {\n  if (game.currentPlayer !== playerIndex) return game;\n  const [deck, cards] = takeCard(game.deck);\n  if (cards.length > 0) {\n    const newGame = updateGame(game, {\n      deck,\n      players: game.players.map((p, i) =>\n        i === playerIndex ? { ...p, cards: [...p.cards, ...cards] } : p\n      ),\n      currentDraws: game.currentDraws + 1,\n    });\n    const topCard = _.first(game.discard);\n    if (\n      game.maxDraws >= 1 &&\n      newGame.currentDraws >= game.maxDraws &&\n      newGame.players[playerIndex].cards.every(\n        (card) => topCard && !isValidPlay(game, topCard, card)\n      )\n    ) {\n      return updateGame(newGame, nextPlayer(game));\n    } else {\n      return newGame;\n    }\n  }\n  return game;\n};\n\nexport const cardEffect: (\n  game: Game,\n  card: Card,\n  afterHand: Card[]\n) => Partial<Game> = (game, card, afterHand) => {\n  switch (card.face) {\n    case \"skip\":\n      return {\n        ...nextPlayer(game, 2),\n      };\n    case \"reverse\":\n      const newDirection = flipDirection(game.direction);\n      return {\n        direction: newDirection,\n        ...nextPlayer(\n          updateGame(game, { direction: newDirection }),\n          game.players.length === 2 ? 2 : 1\n        ),\n      };\n    case \"+4\":\n    case \"+2\":\n      const victimIndex = nextPlayer(game).currentPlayer;\n      const victim = game.players[victimIndex];\n      const victimCanStack = victim.cards.some((c) =>\n        canStackPot(game, card, c)\n      );\n      if (victimCanStack) {\n        return {\n          currentPot: [...game.currentPot, card.face === \"+2\" ? 2 : 4],\n        };\n      } else {\n        const [deck, cards] = takeCard(\n          game.deck,\n          _.sum(game.currentPot) + (card.face === \"+2\" ? 2 : 4),\n          0\n        );\n        return {\n          deck,\n          players: game.players.map((p, i) => {\n            if (i === victimIndex) {\n              return { ...p, cards: [...p.cards, ...cards] };\n            } else if (i === game.currentPlayer) {\n              return { ...p, cards: afterHand };\n            } else {\n              return p;\n            }\n          }),\n          currentPot: [],\n          ...((card.face === \"+2\" && game.plusTwoSkip) ||\n          (card.face === \"+4\" && game.plusFourSkip) ||\n          (game.plusFourSkip && game.currentPot.find((val) => val === 4)) ||\n          (game.plusTwoSkip && game.currentPot.find((val) => val === 2))\n            ? nextPlayer(game, 2)\n            : {}),\n        };\n      }\n    default:\n      return {};\n  }\n};\n\nexport const nextPlayer: (\n  game: Game,\n  offset?: number\n) => Pick<Game, \"currentPlayer\" | \"currentDraws\"> = (game, offset = 1) => ({\n  currentPlayer: mod(\n    game.currentPlayer + (game.direction === \"forward\" ? 1 : -1) * offset,\n    game.players.length\n  ),\n  currentDraws: 0,\n});\n","import { Message } from \"./types\";\nimport Peer from \"peerjs\";\n\nexport const sendMessage: (\n  conn: Peer.DataConnection | Peer.DataConnection[] | undefined,\n  message: Message\n) => void = (conn, message) => {\n  console.log(\"was tasked to send msg:\", message, \"to conn:\", conn);\n  if (Array.isArray(conn)) {\n    conn.forEach((c) => {\n      console.log(`Sending message to ${c.peer}`, message);\n      c.send(JSON.stringify(message));\n    });\n  } else {\n    console.log(`Sending message to ${conn?.peer}`, message);\n    return conn?.send(JSON.stringify(message));\n  }\n};\n\nexport const recvMessage: (message: any) => Message = (message) =>\n  JSON.parse(message) as Message;\n","import _, { toInteger } from \"lodash\";\nimport { useEffect, useState } from \"react\";\nimport { GameConfig } from \"../game/types\";\n\ntype Props = {\n  setGameConfig: (config: GameConfig) => void;\n  readOnly: boolean;\n};\n\ntype ConfigEntry = (\n  | {\n      type: \"number\";\n      default: number;\n    }\n  | {\n      type: \"string\";\n      default: string;\n    }\n  | {\n      type: \"boolean\";\n      default: boolean;\n    }\n) & { description: string };\n\nexport const GameConfigurator = ({ readOnly, setGameConfig }: Props) => {\n  const [locked, setLocked] = useState(false);\n  const [submited, setSubmited] = useState(false);\n  const [configs, setConfigs] = useState<{ [configName: string]: ConfigEntry }>(\n    {\n      numDecks: {\n        type: \"number\",\n        default: 1,\n        description: \"Number of UNO decks to use\",\n      },\n      startingHandSize: {\n        type: \"number\",\n        default: 7,\n        description: \"Number of cards in the starting hand\",\n      },\n      maxDraws: {\n        type: \"number\",\n        default: 1,\n        description:\n          \"Amount of card draws one can make before skipping their turn. 0 for infinite\",\n      },\n      plusTwosStackWithFours: {\n        type: \"boolean\",\n        default: false,\n        description: \"Wether a +2 be stacked with a +4 and vice-versa\",\n      },\n      plusTwoSkip: {\n        type: \"boolean\",\n        default: false,\n        description: \"Wether playing a +2 will skip the victim's turn\",\n      },\n      plusFourSkip: {\n        type: \"boolean\",\n        default: true,\n        description: \"Wether playing a +4 will skip the victim's turn\",\n      },\n      unoPenalty: {\n        type: \"number\",\n        default: 5,\n        description:\n          \"The amount of cards used to penalize who doesn't call UNO on time\",\n      },\n    }\n  );\n\n  useEffect(() => {\n    setLocked(readOnly || submited);\n  }, [readOnly, submited]);\n\n  const DynamicInput = ({\n    config,\n    locked,\n    value,\n    onChange,\n  }: {\n    config: ConfigEntry;\n    locked: boolean;\n    value: string | number | boolean;\n    onChange: React.ChangeEventHandler<HTMLInputElement>;\n  }) => {\n    switch (config.type) {\n      case \"boolean\":\n        return (\n          <input\n            disabled={locked}\n            type=\"checkbox\"\n            checked={value as boolean}\n            onChange={onChange}\n          />\n        );\n      case \"number\":\n        return (\n          <input\n            disabled={locked}\n            type=\"number\"\n            value={value as number}\n            onChange={onChange}\n          />\n        );\n      case \"string\":\n        return (\n          <input\n            disabled={locked}\n            type=\"text\"\n            value={value as string}\n            onChange={onChange}\n          />\n        );\n    }\n  };\n\n  return (\n    <div>\n      {Object.keys(configs).map((configName) => {\n        const config = configs[configName];\n        return (\n          <div key={configName}>\n            <span>{config.description}</span>\n            <DynamicInput\n              locked={locked}\n              config={config}\n              value={config.default}\n              onChange={(e) => {\n                if (config.type === \"string\") {\n                  setConfigs((configs) => ({\n                    ...configs,\n                    [configName]: {\n                      ...config,\n                      default: e.target.value,\n                    },\n                  }));\n                } else if (config.type === \"number\") {\n                  setConfigs((configs) => ({\n                    ...configs,\n                    [configName]: {\n                      ...config,\n                      default: toInteger(e.target.value),\n                    },\n                  }));\n                } else {\n                  setConfigs((configs) => ({\n                    ...configs,\n                    [configName]: {\n                      ...config,\n                      default: e.target.checked,\n                    },\n                  }));\n                }\n              }}\n            />\n          </div>\n        );\n      })}\n      <button\n        onClick={() => {\n          setSubmited(true);\n          setGameConfig(\n            _.fromPairs(\n              Object.keys(configs).map((k) => [k, configs[k].default])\n            )\n          );\n        }}\n      >\n        Save\n      </button>\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Card } from \"./components/card\";\nimport { claimUno, COLORS, drawCard, newGame, playCardFromHand } from \"./game\";\nimport _ from \"lodash\";\nimport { Color, Game, GameConfig } from \"./game/types\";\nimport Peer, { DataConnection } from \"peerjs\";\nimport { Message } from \"./communication/types\";\nimport { recvMessage, sendMessage } from \"./communication\";\nimport { GameConfigurator } from \"./components/gameconfigurator\";\n\nfunction App() {\n  const [game, setLocalGame] = useState(newGame({}));\n  const [colorPicker, setColorPicker] = useState<\n    ((color: Color) => Game) | undefined\n  >(undefined);\n  const [ready, setReady] = useState(false);\n  const [sessionId, setSessionId] = useState(\"\");\n  const [isHost, setIsHost] = useState(false);\n  const [name, setName] = useState(\"\");\n  const [connections, setConnections] = useState<DataConnection[]>([]);\n  const [peers, setPeers] = useState<string[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({});\n\n  const setGame = useCallback(\n    (newGame: Game, currentId: string) => {\n      if (currentId === game.id) {\n        if (isHost) {\n          setLocalGame(newGame);\n        }\n        if (currentId !== newGame.id) {\n          sendMessage(connections, {\n            type: \"updategame\",\n            game: newGame,\n            currentId,\n          });\n        }\n      } else {\n        console.error(\n          \"Ignoring game update\",\n          newGame,\n          `meant for an old version ${currentId}. current version is ${game.id}`\n        );\n      }\n    },\n    [connections, isHost, game]\n  );\n\n  useEffect(() => {\n    if (connections && isHost) {\n      connections.forEach((connection) =>\n        sendMessage(connection, { type: \"peerlist\", peers })\n      );\n    }\n  }, [peers, connections, isHost]);\n\n  useEffect(() => {\n    console.log(\"Peer list got updated!\", peers);\n  }, [peers]);\n\n  useEffect(() => {\n    console.log(\"Connections list got updated!\", connections);\n  }, [connections]);\n\n  useEffect(() => {\n    connections.forEach((conn) => {\n      conn.on(\"data\", (data) => {\n        const msg: Message = recvMessage(data);\n        console.log(\"Got data\", msg);\n        switch (msg.type) {\n          case \"newpeer\":\n            setPeers((p) => {\n              console.log(`Got new peer ${msg.peer}. Current`, p);\n              return [...p, msg.peer];\n            });\n            break;\n          case \"peerlist\":\n            setPeers(msg.peers);\n            break;\n          case \"updategame\":\n            if (isHost) {\n              setGame(msg.game, msg.currentId);\n            } else {\n              setLocalGame(msg.game);\n            }\n            setReady(true);\n            break;\n          default:\n            break;\n        }\n      });\n\n      conn.on(\"open\", () => {\n        console.log(\"Opened new conn!\");\n        if (!isHost)\n          sendMessage(conn, {\n            type: \"newpeer\",\n            peer: name,\n          });\n      });\n    });\n\n    return () => {\n      connections.forEach((conn) => {\n        conn.off(\"data\", (undefined as unknown) as Function);\n        conn.off(\"open\", (undefined as unknown) as Function);\n      });\n    };\n  }, [connections, isHost, name, setGame]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {!ready ? (\n          <>\n            {isHost ? (\n              <div>\n                <button\n                  onClick={() => {\n                    const freshGame = newGame({\n                      ...gameConfig,\n                      playerNames: peers,\n                    });\n                    setGame(freshGame, game.id);\n                    setReady(true);\n                  }}\n                >\n                  Start game\n                </button>\n                <GameConfigurator\n                  readOnly={false}\n                  setGameConfig={setGameConfig}\n                />\n              </div>\n            ) : (\n              (name !== \"\" || sessionId !== \"\") && (\n                <span>Wait for host to start the game</span>\n              )\n            )}\n            <div>\n              <ul>\n                {peers.map((p) => (\n                  <li key={p}>{p}</li>\n                ))}\n              </ul>\n            </div>\n            <div>\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                disabled={\n                  connections.length > 0 || peers.length > 0 ? true : false\n                }\n                onChange={(e) => setName(e.target.value)}\n                value={name}\n              />\n            </div>\n            <hr />\n            {isHost && (\n              <div>\n                <span>\n                  Waiting for connections. Share your session ID: {sessionId}\n                </span>\n              </div>\n            )}\n            {!isHost && connections.length === 0 && (\n              <>\n                <div>\n                  <button\n                    disabled={name === \"\"}\n                    onClick={() => {\n                      const peer = new Peer();\n                      peer.on(\"open\", (id) => {\n                        console.log(\"Listening in session\", id);\n                        setIsHost(true);\n                        setPeers([name]);\n                        setSessionId(id);\n                        peer.on(\"connection\", (conn) => {\n                          console.log(\"Received connection!\", conn);\n                          setConnections((cs) => [...cs, conn]);\n                        });\n                      });\n                    }}\n                  >\n                    Host a session\n                  </button>\n                </div>\n                <span>or</span>\n                <div>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Session id\"\n                    value={sessionId}\n                    onChange={(e) => setSessionId(e.target.value)}\n                  />\n                  <button\n                    disabled={sessionId === \"\" || name === \"\"}\n                    onClick={() => {\n                      console.log(\"trying to connect to\", sessionId);\n                      const peer = new Peer();\n                      peer.on(\"open\", (id) => {\n                        console.log(\"I have ID\", id);\n                        const conn = peer.connect(sessionId.trim());\n                        setConnections((cs) => [...cs, conn]);\n                      });\n                    }}\n                  >\n                    Join a session\n                  </button>\n                </div>\n              </>\n            )}\n          </>\n        ) : (\n          <>\n            {game.winner ? (\n              <span>We have a winner! Congrats {game.winner.name}</span>\n            ) : (\n              <>\n                {colorPicker && (\n                  <div>\n                    {COLORS.map((color) => (\n                      <button\n                        style={{ backgroundColor: color }}\n                        key={color}\n                        onClick={() => {\n                          setGame(colorPicker(color), game.id);\n                          setColorPicker(undefined);\n                        }}\n                      >\n                        {color}\n                      </button>\n                    ))}\n                  </div>\n                )}\n                <div\n                  id=\"player-hands\"\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  {game.players.map((player, playerIndex) => (\n                    <div\n                      key={player.name}\n                      style={{ display: \"flex\", flexDirection: \"column\" }}\n                    >\n                      <span\n                        style={{\n                          color:\n                            game.currentPlayer === playerIndex\n                              ? \"green\"\n                              : \"white\",\n                        }}\n                      >\n                        {player.name}\n                      </span>\n                      <span>{player.cards.length}</span>\n                      <ul>\n                        {player.cards.map((c, i) => (\n                          <div key={i} style={{ margin: \"3px\" }}>\n                            <Card\n                              hidden={player.name !== name}\n                              key={i}\n                              onClick={() => {\n                                if (c.color === \"wild\") {\n                                  setColorPicker(() => (color: Color) => {\n                                    return playCardFromHand(\n                                      game,\n                                      playerIndex,\n                                      i,\n                                      color\n                                    );\n                                  });\n                                } else {\n                                  setGame(\n                                    playCardFromHand(game, playerIndex, i),\n                                    game.id\n                                  );\n                                }\n                              }}\n                              card={c}\n                            />\n                          </div>\n                        ))}\n                      </ul>\n                      {player.name === name && (\n                        <button\n                          onClick={() => {\n                            if (player.name === name)\n                              setGame(drawCard(game, playerIndex), game.id);\n                          }}\n                        >\n                          Take card\n                        </button>\n                      )}\n                    </div>\n                  ))}\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>Top card</span>\n                    {<Card card={_.first(game.discard)} />}\n                  </div>\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\n                    <span>\n                      POT: {JSON.stringify(game.currentPot)} ={\" \"}\n                      {_.sum(game.currentPot)}\n                    </span>\n                    <span>Deck - {game.deck.length}</span>\n                  </div>\n                </div>\n                {game.unclaimedUno !== undefined ? (\n                  <div>\n                    <button\n                      onClick={() => {\n                        setGame(\n                          claimUno(\n                            game,\n                            game.players.findIndex((p) => p.name === name)\n                          ),\n                          game.id\n                        );\n                      }}\n                    >\n                      {game.players[game.unclaimedUno].name === name\n                        ? \"Claim\"\n                        : \"Contest\"}{\" \"}\n                      UNO!\n                    </button>\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </>\n            )}\n          </>\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}